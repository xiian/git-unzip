#!/usr/bin/env python
# coding=utf-8
from __future__ import absolute_import
import sys
from os.path import dirname, realpath, abspath
import logging


prefix = dirname(dirname(realpath(abspath(__file__))))
sys.path.insert(1, prefix)

if __name__ == '__main__':
    from unzip import Unzipper
    from unzip.utils import GitCmdException, RebaseAndTagException

    logging.basicConfig(level=logging.WARNING,
                        format='%(name)8s - %(funcName)8s:%(lineno)4d -  %(levelname)8s - %(message)s')

    # Get parameters
    import argparse
    parser = argparse.ArgumentParser(
        description="""
        Unzip git branches that have had the another branch merged in to "update" it.
        """,
        add_help=True,
        version='1.0',
        epilog="""
        Been merging another branch into your branch "just to get the updates"?
        Now, you can clean up the history of the branch so all of those merge commits can disappear.
        Clean, simple and clear. Your future self will thank you.
        """
    )
    parser.add_argument('--unzip-from-branch',
                        action='store',
                        default='origin/master',
                        metavar='origin/master',
                        help="""
                        Main branch that has been unnecessarily merged into the zipped branch. Defaults to origin/master.
                        """
    )
    parser.add_argument('--zipped_branch',
                        action='store',
                        help="""
                        Branch that has the other main branch unnecessarily merged into it.
                        """
    )
    parser.add_argument('--zip_base',
                        action='store',
                        nargs='?',
                        help="""
                        The original branching point of the two branches. This is most likely *not* the result of
                        `git merge-base` since that is affected by merging the main branch into the zipped branch.
                        """
    )

    results = parser.parse_args()

    try:
        unzipper = Unzipper(
            zipped_branch=results.zipped_branch,
            unzip_from_branch=results.unzip_from_branch,
            zip_base=results.zip_base,
            logger=logging.getLogger('unzip')
        )
        unzipper.run()
    except RebaseAndTagException as e:
        from unzip.utils import run_cmd

        print '-' * 100
        print e.message

        print "Fix the following conflicts:"
        for conflict in (run_cmd('git diff --name-only --diff-filter=U')).split("\n"):
            print "    * %s" % conflict

        print """
Then, run `git rebase --continue` to continue the process.

Once all rebasing is complete, run the following command to tag the progress:
    git tag -f %s

Finally, continue the unzipping process by re-running the unzip command:
    %s
        """ % (
            e.tag,
            ' '.join(sys.argv),
        )
    except GitCmdException as e:
        print e.message
        print e.stdout
        print '-' * 100
        print e.stderr
    except Exception as e:
        print e.message